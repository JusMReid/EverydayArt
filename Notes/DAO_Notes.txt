class CategoryDAO{
  public CategoryDTO[] getAllCategories(){
    conn = getConn()
    resultSet rs= conn.createStatement("Select
      * from Category;").execute();

    ArrayList <CategoryDTO></CategoryDTO> catDTOs = new ArrayList <CategoryDTO>()

    for(rows:rs){
    CategoryDTO CDTO = new CategoryDTO();
    CDTO.detID(rows["cat.ID"]);
    CDTO.setName(rows["cat.Name"]);
    catDTOs.add(CDTO);
    }
  }
}
*******************TO GET CATEGORIES BY NAME & ID***********************
class CategoryDAO{
  public CategoryDTO[] getAllCategoriesByNameID(){
    conn = getConn()
    resultSet rs= conn.createStatement("Select
      id, name from Category;").execute();

    ArrayList <CategoryDTO></CategoryDTO> catDTOs = new ArrayList <CategoryDTO>()

    for(rows:rs){
    CategoryDTO CDTO = new CategoryDTO();
    CDTO.detID(rows["cat.ID"]);
    CDTO.setName(rows["cat.Name"]);
    catDTOs.add(CDTO);
    }
  }
}
**************************************************************************
class ItemDAO{
  public ItemDTO[] getAllItems(){
    conn = getCon()

    resultSet rs = conn.createStatement("Select
      Item.ID, Item.Name,Item.Price, Category.Cat.ID,
      Category.Name from Category,Cat_Item, Item
      where Item.Item.ID = Cat_Item.Item.ID and
        Cat.Cat.ID = Cat_Item.Cat.ID;").execute();

      ArrayList <ItemDTO> itemDTOs = new ArrayList <ItemDTO>();

      for(row:rs){
        itemDTO itemDTO = new ItemDTO();
        CategoryDTO catDTO = new CategoryDTO();

        itemDTO.setID(rows["Item.Item.id"]);
        itemDTO.setName(rows["Item.Item.id"]);
        itemDTO.setPrice(rows["Item.Item.id"]);

        catDTO.setID(rows["Cat.Cat.id"]);
        catDTO.setName(rows["Cat.Cat.id"]);

        itemDTO.setCatDTO(CatDTO);
        itemDTOs.add(itemDTO);
        }
      }
      return ItemDTOs;
    }
  }
}

When retrieving multiple info from multiple tables
you'll have to use a mapper while retrieving each Item
you can get the corresponding category and not all the categories.

class ItemDTO{
  String name;
  int id;
  float price;
  CategoryDTO catDTO;

  //SETTERS & GETTERS FOR ALL OF THE ABOVE
}

class CategoryDTO{
  String category;
  int ID;
  ItemDTO[] itemDTO;

  //SETTERS & GETTERS FOR ALL OF THE ABOVE
}

class itemDAO{
  public boolean updateItem(itemDTO itemDTO){
    connection conn = ConnectionManager.getCOnnection();

    preparedStatement ps = conn.PrepareStatement("Update Item set name  = ?
                              and price = ? where id = ?");
    ps.setString(1, itemDTO.getName());
    ps.setFloat(2, itemDTO.getPrice());
    ps.setInt(3, itemDTO.getId());

    boolean status = ps.execute();

    return status;
    //Write a method that updates all columns whether their values change or not
  }
}

class categoryDAO{
  public boolean updateCategory(categoryDTO categoryDTO){
    connection conn = ConnectionManager.getConnection();

    preparedStatement ps = conn.PrepareStatement("Update Category set category=?
                                where id=?");

    ps.setString(1,categoryDTO.getCategory());
    ps.setInt(2,categoryDTO.getID());

    boolean status = ps.execute();

    return status;
  }
}

/////////////////-----------------------------------------------------------
class CategoryDTO{
  int id;
  String name;
  List<ItemDTO> items = null;

  int getID(){
    return id;
  }

  void setID(int id){
    this.id = id;
  }

  String getName(){
    return name;
  }

  void setName(){
    this.name = name;
  }

  List <ItemDTO> getItems(){
    if(items == null  || new_Data_Available == true){
      items = new ItemDAO().getItemsByCategory(this);

      return items;
    }
}
}
